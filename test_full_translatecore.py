#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ TranslateCore –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–º–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º –∫–æ–¥–∞
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é TranslateCore
sys.path.insert(0, '/Users/deus21/Desktop/Projects/TranslateCore/src')

try:
    from translatecore import (
        EnhancedTranslator,
        OfflineTranslator,
        APIConfigLoader,
        SmartCodeAwareTranslator
    )
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã TranslateCore!")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TranslateCore: {e}")
    sys.exit(1)

def test_smart_code_translator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∫–æ–¥–∞"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SmartCodeAwareTranslator...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
        smart_translator = SmartCodeAwareTranslator(
            source_lang='auto',
            target_lang='english'
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        test_file = "/Users/deus21/Desktop/Projects/TranslateCore/test_translatecore_complete.py"
        
        if not os.path.exists(test_file):
            print(f"‚ùå –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        print(f"üìÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–∞–π–ª: {test_file}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        from pathlib import Path
        result = smart_translator.translate_file_smart(Path(test_file))
        
        if result:
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω —É–º–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º!")
            print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {test_file}.backup")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π Python –∫–æ–¥
            try:
                with open(test_file, 'r', encoding='utf-8') as f:
                    translated_content = f.read()
                    
                # –ü—Ä–æ–±—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                compile(translated_content, test_file, 'exec')
                print("‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
                backup_file = test_file + '.backup'
                if os.path.exists(backup_file):
                    with open(backup_file, 'r', encoding='utf-8') as backup:
                        original_content = backup.read()
                    with open(test_file, 'w', encoding='utf-8') as original:
                        original.write(original_content)
                    print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                
                return True
                
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º –∫–æ–¥–µ: {e}")
                return False
                
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ñ–∞–π–ª–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SmartCodeAwareTranslator: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_basic_translators():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤"""
    print("\nüåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤...")
    
    test_text = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤."
    translators = [
        ("Enhanced", EnhancedTranslator(source_lang='ru', target_lang='en')),
        ("Offline", OfflineTranslator(source_lang='ru', target_lang='en') if 'OfflineTranslator' in globals() else None)
    ]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º None –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏
    translators = [(name, trans) for name, trans in translators if trans is not None]
    
    results = []
    
    for name, translator in translators:
        try:
            print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É—é {name} –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫...")
            if name == 'Enhanced':
                result_obj = translator.translate(test_text)
                result = result_obj.translated if hasattr(result_obj, 'translated') else str(result_obj)
            else:
                result = translator.translate(test_text)
            
            if result and result.strip():
                print(f"‚úÖ {name}: {result}")
                results.append(True)
            else:
                print(f"‚ùå {name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                results.append(False)
                
        except Exception as e:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")
            results.append(False)
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤: {success_count}/{total_count} —É—Å–ø–µ—à–Ω–æ")
    return success_count > 0

def test_enhanced_features():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π EnhancedTranslator"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π EnhancedTranslator...")
    
    try:
        translator = EnhancedTranslator(source_lang='ru', target_lang='en')
        
        # –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        texts = [
            "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
            "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏: API, JSON, Python",
            "–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        ]
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞–∫–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥...")
        batch_results = translator.translate_batch(texts)
        
        if batch_results and len(batch_results) == len(texts):
            print("‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            for i, result in enumerate(batch_results):
                translated_text = result.translated if hasattr(result, 'translated') else str(result)
                print(f"   {i+1}. {translated_text}")
                
            # –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–≤—Ç–æ—Ä—è–µ–º –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            cached_result_obj = translator.translate(texts[0])
            cached_result = cached_result_obj.translated if hasattr(cached_result_obj, 'translated') else str(cached_result_obj)
            print(f"‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {cached_result}")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TRANSLATECORE –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    tests_results = []
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏
    tests_results.append(("–ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏", test_basic_translators()))
    
    # –¢–µ—Å—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    tests_results.append(("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", test_enhanced_features()))
    
    # –¢–µ—Å—Ç 3: –£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–æ–¥–∞
    tests_results.append(("–£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–æ–¥–∞", test_smart_code_translator()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    successful_tests = 0
    total_tests = len(tests_results)
    
    for test_name, result in tests_results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<40} {status}")
        if result:
            successful_tests += 1
    
    print("=" * 60)
    success_rate = (successful_tests / total_tests) * 100
    print(f"üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
    
    if successful_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! TranslateCore –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    elif successful_tests > 0:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("üí• –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
