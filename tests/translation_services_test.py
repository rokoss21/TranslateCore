#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å LibreTranslate –∏ –¥—Ä—É–≥–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
"""

import json
import time
from pathlib import Path
from enhanced_translator import EnhancedTranslator, TranslationResult

def test_translation_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    test_phrases = [
        "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
        "–ö–∞–∫ –¥–µ–ª–∞?", 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    ]
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    service_configs = [
        {
            'name': 'Google Translate',
            'services': ['google'],
            'api_keys': {}
        },
        {
            'name': 'LibreTranslate (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)',
            'services': ['libre'],
            'api_keys': {}
        },
        {
            'name': 'MyMemory',
            'services': ['mymemory'],
            'api_keys': {}
        },
        {
            'name': '–°–º–µ—à–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
            'services': ['libre', 'google', 'mymemory'],
            'api_keys': {}
        },
        {
            'name': '–¢–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏',
            'services': ['pons', 'linguee'],
            'api_keys': {}
        }
    ]
    
    results = {}
    
    for config in service_configs:
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {config['name']}")
        print(f"üìã –°–µ—Ä–≤–∏—Å—ã: {', '.join(config['services'])}")
        print("-" * 40)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            translator = EnhancedTranslator(
                source_lang='russian',
                target_lang='english',
                preferred_services=config['services'],
                cache_file=f"cache_{config['name'].lower().replace(' ', '_')}.json",
                api_keys=config['api_keys']
            )
            
            config_results = []
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Ñ—Ä–∞–∑—É
            for phrase in test_phrases:
                print(f"  ‚Ä¢ '{phrase}'", end=' ‚Üí ')
                
                try:
                    result = translator.translate(phrase, use_cache=False)  # –ë–µ–∑ –∫–µ—à–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
                    print(f"'{result.translated}' ({result.service})")
                    
                    config_results.append({
                        'original': phrase,
                        'translated': result.translated,
                        'service': result.service,
                        'success': True
                    })
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(0.5)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    config_results.append({
                        'original': phrase,
                        'translated': phrase,
                        'service': 'error',
                        'success': False,
                        'error': str(e)
                    })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results[config['name']] = {
                'results': config_results,
                'stats': translator.get_stats()
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            stats = translator.get_stats()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
            print(f"   ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: {stats['cache_hits']}")
            print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤: {stats['service_usage']}")
            if stats['errors']:
                print(f"   ‚Ä¢ –û—à–∏–±–∫–∏: {len(stats['errors'])}")
                for error in stats['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                    print(f"     - {error}")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            results[config['name']] = {'error': str(e)}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_test_results(results)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    print_summary(results)

def save_test_results(results):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    results_file = Path('translation_services_test_results.json')
    
    try:
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def print_summary(results):
    """–í—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
    print("\n" + "=" * 60)
    print("üìà –°–í–û–î–ö–ê –ü–û –í–°–ï–ú –¢–ï–°–¢–ê–ú")
    print("=" * 60)
    
    for config_name, config_data in results.items():
        if 'error' in config_data:
            print(f"‚ùå {config_name}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
            continue
        
        results_list = config_data.get('results', [])
        stats = config_data.get('stats', {})
        
        successful = len([r for r in results_list if r.get('success', False)])
        total = len(results_list)
        success_rate = (successful / total * 100) if total > 0 else 0
        
        print(f"\nüìä {config_name}:")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful}/{total} ({success_rate:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_used = {}
        for result in results_list:
            service = result.get('service', 'unknown')
            services_used[service] = services_used.get(service, 0) + 1
        
        if services_used:
            print(f"   ‚Ä¢ –°–µ—Ä–≤–∏—Å—ã: {dict(services_used)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'total_requests' in stats:
            print(f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")

def test_libre_translate_specifically():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç LibreTranslate —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("\n" + "=" * 60)
    print("üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LIBRETRANSLATE")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º LibreTranslate —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    libre_configs = [
        {
            'name': 'LibreTranslate (–ø—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)',
            'api_keys': {}
        },
        {
            'name': 'LibreTranslate —Å API –∫–ª—é—á–æ–º',
            'api_keys': {'libre': 'your_api_key_here'}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
        }
    ]
    
    test_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞!"
    
    for config in libre_configs:
        print(f"\nüß™ –¢–µ—Å—Ç: {config['name']}")
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: '{test_text}'")
        
        try:
            translator = EnhancedTranslator(
                source_lang='russian',
                target_lang='english',
                preferred_services=['libre'],
                cache_file='libre_test_cache.json',
                api_keys=config['api_keys']
            )
            
            result = translator.translate(test_text)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result.translated}'")
            print(f"üîß –°–µ—Ä–≤–∏—Å: {result.service}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_translation_services()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã LibreTranslate
    test_libre_translate_specifically()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
