#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ API –∫–ª—é—á–µ–π
"""

from enhanced_translator import EnhancedTranslator
from config_loader import APIConfigLoader, ConfigurationError

def test_development_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã)"""
    print("üß™ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'development'")
    print("-" * 40)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é development
        translator = EnhancedTranslator(
            source_lang='russian',
            target_lang='english',
            config_file='translation_api_config.json',
            service_config_name='development'
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        test_phrases = [
            "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ]
        
        print("\nüìù –ü–µ—Ä–µ–≤–æ–¥—ã:")
        for phrase in test_phrases:
            result = translator.translate(phrase, use_cache=False)
            print(f"  '{phrase}' ‚Üí '{result.translated}' ({result.service})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = translator.get_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {', '.join(stats['active_services'])}")
        print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤: {stats['service_usage']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_config_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    print("=" * 50)
    
    try:
        loader = APIConfigLoader('translation_api_config.json')
        configs = loader.list_available_configs()
        
        for config_name, config_data in configs.items():
            print(f"\nüîß {config_name}: {config_data['name']}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            validation = loader.validate_config(config_name)
            
            if validation['valid']:
                print("   ‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                if validation['available_services']:
                    print(f"   üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {len(validation['available_services'])}")
            else:
                print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π")
                if validation['missing_keys']:
                    print(f"   üîë –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ: {', '.join(validation['missing_keys'])}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            for warning in validation['warnings']:
                print(f"   ‚ö†Ô∏è {warning}")
                
    except ConfigurationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def show_setup_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print("\n" + "=" * 60)
    print("üìñ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï API –ö–õ–Æ–ß–ï–ô")
    print("=" * 60)
    
    instructions = [
        {
            "service": "DeepL (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            "steps": [
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.deepl.com/pro-api",
                "2. –°–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (500K —Å–∏–º–≤–æ–ª–æ–≤/–º–µ—Å—è—Ü)",
                "3. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ 'Account'",
                "4. –í—Å—Ç–∞–≤—å—Ç–µ –≤ translation_api_config.json –≤ –ø–æ–ª–µ deepl.key"
            ]
        },
        {
            "service": "OpenAI ChatGPT",
            "steps": [
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com",
                "2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç ($5 –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)",
                "3. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ 'API Keys'",
                "4. –í—Å—Ç–∞–≤—å—Ç–µ –≤ translation_api_config.json –≤ –ø–æ–ª–µ openai.key"
            ]
        },
        {
            "service": "Microsoft Translator",
            "steps": [
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://azure.microsoft.com",
                "2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç (2M —Å–∏–º–≤–æ–ª–æ–≤/–º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
                "3. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å 'Translator' –≤ Azure",
                "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤ translation_api_config.json"
            ]
        }
    ]
    
    for instruction in instructions:
        print(f"\nüîë {instruction['service']}")
        for step in instruction['steps']:
            print(f"   {step}")
    
    print(f"\nüí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π:")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'production_basic' –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'ai_powered' –¥–ª—è ChatGPT –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'multilingual_enterprise' –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")

def demo_different_configs():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–õ–ò–ß–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_configs = [
        {
            'name': 'offline_only',
            'description': '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥'
        },
        {
            'name': 'development',
            'description': '–û—Ñ—Ñ–ª–∞–π–Ω + –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å—ã'
        }
        # –î—Ä—É–≥–∏–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ API –∫–ª—é—á–µ–π
    ]
    
    test_phrase = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞!"
    
    for config in demo_configs:
        config_name = config['name']
        print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}")
        print(f"üìù {config['description']}")
        
        try:
            translator = EnhancedTranslator(
                source_lang='russian',
                target_lang='english',
                config_file='translation_api_config.json',
                service_config_name=config_name
            )
            
            result = translator.translate(test_phrase, use_cache=False)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result.translated}'")
            print(f"üîß –°–µ—Ä–≤–∏—Å: {result.service}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("üåê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò API –ö–õ–Æ–ß–ï–ô")
    print("=" * 70)
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    test_config_validation()
    
    # –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if test_development_config():
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 'development' —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    demo_different_configs()
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    show_setup_instructions()
    
    print("\n" + "=" * 70)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 70)
    
    print("\nüìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ python3 config_loader.py --list                    # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    print("‚Ä¢ python3 config_loader.py --validate development    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("‚Ä¢ python3 enhanced_translator.py \\")
    print("    --config-file translation_api_config.json \\")
    print("    --service-config development \\")
    print("    --text '–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!'                             # –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")

if __name__ == "__main__":
    main()
