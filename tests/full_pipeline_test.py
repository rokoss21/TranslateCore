#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import json
import subprocess
import sys
import os
from pathlib import Path

def load_translation_configs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤"""
    try:
        with open('translation_configs.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
        return None

def backup_test_project():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    backup_dir = Path("test_project_backup")
    test_dir = Path("test_project")
    
    if backup_dir.exists():
        print("üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    try:
        subprocess.run(['cp', '-r', str(test_dir), str(backup_dir)], check=True)
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def restore_test_project():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    backup_dir = Path("test_project_backup")
    test_dir = Path("test_project")
    
    if not backup_dir.exists():
        print("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
        subprocess.run(['rm', '-rf', str(test_dir)], check=True)
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        subprocess.run(['cp', '-r', str(backup_dir), str(test_dir)], check=True)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

def test_translation_service(config_name, config_data):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {config_data['name']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {config_data['description']}")
    print(f"üîß –°–µ—Ä–≤–∏—Å—ã: {', '.join(config_data['services'])}")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è auto_extract_translate.py
    temp_config = {
        "service": "enhanced",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enhanced_translator
        "source_lang": "ru", 
        "target_lang": "en",
        "enhanced_services": config_data['services'],
        "api_keys": config_data['api_keys']
    }
    
    temp_config_file = f"temp_config_{config_name}.json"
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(temp_config_file, 'w', encoding='utf-8') as f:
            json.dump(temp_config, f, ensure_ascii=False, indent=2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
        cmd = [
            sys.executable, 
            'auto_extract_translate.py',
            '--source-dir', 'test_project',
            '--source-lang', 'ru',
            '--target-lang', 'en', 
            '--service', 'enhanced',
            '--config-file', temp_config_file
        ]
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞...")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            output_lines = result.stdout.split('\n')
            stats = extract_stats_from_output(output_lines)
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for key, value in stats.items():
                print(f"   ‚Ä¢ {key}: {value}")
            
            return {"success": True, "stats": stats, "output": result.stdout}
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞!")
            print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode}")
            print(f"–û—à–∏–±–∫–∏: {result.stderr}")
            
            return {"success": False, "error": result.stderr, "output": result.stdout}
    
    except subprocess.TimeoutExpired:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)")
        return {"success": False, "error": "Timeout"}
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {"success": False, "error": str(e)}
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if os.path.exists(temp_config_file):
            os.remove(temp_config_file)

def extract_stats_from_output(output_lines):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    stats = {}
    
    for line in output_lines:
        if "–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤" in line.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            parts = line.split()
            for i, part in enumerate(parts):
                if part.isdigit():
                    stats["–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤"] = part
                    break
        
        elif "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ" in line.lower() and "—É—Å–ø–µ—à–Ω–æ" in line.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            parts = line.split()
            for i, part in enumerate(parts):
                if part.isdigit():
                    stats["–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ"] = part
                    break
        
        elif "—Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞" in line.lower():
            stats["–§–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤"] = "–°–æ–∑–¥–∞–Ω"
            
        elif "–∑–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in line.lower():
            stats["–ó–∞–º–µ–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö"] = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    
    return stats

def print_final_report(results):
    """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
    print("\n" + "="*80)
    print("üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø–ú")
    print("="*80)
    
    successful = []
    failed = []
    
    for config_name, result in results.items():
        if result["success"]:
            successful.append(config_name)
        else:
            failed.append(config_name)
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(successful)}")
    for config in successful:
        print(f"   ‚Ä¢ {config}")
    
    print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(failed)}")
    for config in failed:
        print(f"   ‚Ä¢ {config}")
    
    if successful:
        print(f"\nüèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {successful[0]}")
    
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {len(successful)}/{len(results)} ({len(successful)/len(results)*100:.1f}%)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• –°–ï–†–í–ò–°–û–í –ü–ï–†–ï–í–û–î–ê")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    configs_data = load_translation_configs()
    if not configs_data:
        return
    
    configs = configs_data["configs"]
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    if not backup_test_project():
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–∏)
    test_configs = {
        "google_only": configs["google_only"],
        "mixed_free": configs["mixed_free"]
    }
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Å–µ—Ä–≤–∏—Å—ã
    if os.getenv('DEEPL_API_KEY'):
        test_configs["premium_services"] = configs["premium_services"] 
        test_configs["premium_services"]["api_keys"]["deepl"] = os.getenv('DEEPL_API_KEY')
    
    if os.getenv('OPENAI_API_KEY'):
        test_configs["ai_powered"] = configs["ai_powered"]
        test_configs["ai_powered"]["api_keys"]["openai"] = os.getenv('OPENAI_API_KEY')
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    for config_name, config_data in test_configs.items():
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            restore_test_project()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            result = test_translation_service(config_name, config_data)
            results[config_name] = result
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {config_name}: {e}")
            results[config_name] = {"success": False, "error": str(e)}
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_final_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open('full_pipeline_test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ full_pipeline_test_results.json")
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
