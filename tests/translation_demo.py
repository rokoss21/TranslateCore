#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
"""

from enhanced_translator import EnhancedTranslator
import time

def compare_translation_services():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    test_phrases = [
        {
            "text": "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
            "type": "–ü—Ä–æ—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞",
            "expected_quality": "high"
        },
        {
            "text": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "type": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞", 
            "expected_quality": "medium"
        },
        {
            "text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            "type": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
            "expected_quality": "high"
        },
        {
            "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
            "type": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "expected_quality": "high"
        },
        {
            "text": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "type": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
            "expected_quality": "medium"
        }
    ]
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
    services_configs = [
        {
            "name": "Google Translate",
            "services": ["google"],
            "api_keys": {},
            "expected_availability": True
        },
        {
            "name": "Google + Linguee (–∫–æ–º–±–æ)",
            "services": ["google", "linguee"],
            "api_keys": {},
            "expected_availability": True
        }
        # –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ API –∫–ª—é—á–µ–π
    ]
    
    print("üåê –°–†–ê–í–ù–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ü–ï–†–ï–í–û–î–û–í –†–ê–ó–õ–ò–ß–ù–´–• –°–ï–†–í–ò–°–û–í")
    print("=" * 80)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"{'–§—Ä–∞–∑–∞':<50} {'–°–µ—Ä–≤–∏—Å':<25} {'–ü–µ—Ä–µ–≤–æ–¥':<30}")
    print("-" * 105)
    
    results = {}
    
    for phrase_data in test_phrases:
        phrase = phrase_data["text"]
        phrase_type = phrase_data["type"]
        
        print(f"\nüìù {phrase_type}: '{phrase}'")
        print("-" * 80)
        
        phrase_results = {}
        
        for service_config in services_configs:
            service_name = service_config["name"]
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
                translator = EnhancedTranslator(
                    source_lang='russian',
                    target_lang='english',
                    preferred_services=service_config['services'],
                    cache_file=f"demo_cache_{service_name.lower().replace(' ', '_')}.json",
                    api_keys=service_config['api_keys']
                )
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                result = translator.translate(phrase, use_cache=False)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                phrase_results[service_name] = {
                    "translated": result.translated,
                    "service_used": result.service,
                    "confidence": result.confidence,
                    "success": True
                }
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                print(f"‚úÖ {service_name:<25} ‚Üí '{result.translated}'")
                if result.service != service_config['services'][0]:
                    print(f"   (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: {result.service})")
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                phrase_results[service_name] = {
                    "error": str(e),
                    "success": False
                }
                print(f"‚ùå {service_name:<25} ‚Üí –û—à–∏–±–∫–∞: {e}")
        
        results[phrase] = phrase_results
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    print_comparison_summary(results)
    
    return results

def print_comparison_summary(results):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n" + "=" * 80)
    print("üìä –°–í–û–î–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø –°–ï–†–í–ò–°–û–í")
    print("=" * 80)
    
    # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    service_stats = {}
    
    for phrase, phrase_results in results.items():
        for service_name, result in phrase_results.items():
            if service_name not in service_stats:
                service_stats[service_name] = {"success": 0, "total": 0, "translations": []}
            
            service_stats[service_name]["total"] += 1
            
            if result.get("success", False):
                service_stats[service_name]["success"] += 1
                service_stats[service_name]["translations"].append(result["translated"])
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for service_name, stats in service_stats.items():
        success_rate = (stats["success"] / stats["total"] * 100) if stats["total"] > 0 else 0
        
        print(f"\nüîß {service_name}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success']}/{stats['total']} ({success_rate:.1f}%)")
        
        if stats["translations"]:
            print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
            for i, translation in enumerate(stats["translations"][:3], 1):
                print(f"     {i}. '{translation}'")

def demonstrate_service_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n" + "=" * 80)
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–°–û–ë–ï–ù–ù–û–°–¢–ï–ô –°–ï–†–í–ò–°–û–í")
    print("=" * 80)
    
    print("\n1Ô∏è‚É£ Google Translate - –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥")
    print("-" * 40)
    
    try:
        google_translator = EnhancedTranslator(
            source_lang='russian',
            target_lang='english',
            preferred_services=['google']
        )
        
        batch_phrases = [
            "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞",
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É",
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        ]
        
        print("üì¶ –ë–∞—Ç—á–µ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:")
        batch_results = google_translator.translate_batch(batch_phrases, show_progress=True)
        
        for i, result in enumerate(batch_results):
            print(f"   {i+1}. '{result.original}' ‚Üí '{result.translated}'")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = google_translator.get_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Google Translate:")
        print(f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"   ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: {stats['cache_hits']} ({stats['cache_hit_rate']:.1f}%)")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {stats['cache_size']} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Google Translate: {e}")
    
    print("\n2Ô∏è‚É£ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫")
    print("-" * 40)
    
    try:
        combo_translator = EnhancedTranslator(
            source_lang='russian',
            target_lang='english',
            preferred_services=['google', 'linguee'],  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Google, –∑–∞—Ç–µ–º Linguee
        )
        
        test_phrase = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
        result = combo_translator.translate(test_phrase)
        
        print(f"üìù –¢–µ—Å—Ç: '{test_phrase}'")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result.translated}' (—Å–µ—Ä–≤–∏—Å: {result.service})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {e}")

def show_service_recommendations():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n" + "=" * 80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–´–ë–û–†–£ –°–ï–†–í–ò–°–û–í")
    print("=" * 80)
    
    recommendations = [
        {
            "scenario": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "service": "Google Translate",
            "reason": "–ë—ã—Å—Ç—Ä—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
            "config": ["google"]
        },
        {
            "scenario": "–ü—Ä–æ–¥–∞–∫—à–Ω –ø—Ä–æ–µ–∫—Ç—ã",
            "service": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (Google + DeepL)",
            "reason": "–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ + –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", 
            "config": ["google", "deepl"]
        },
        {
            "scenario": "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "service": "–õ–æ–∫–∞–ª—å–Ω—ã–π LibreTranslate",
            "reason": "–ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä",
            "config": ["libre"]
        },
        {
            "scenario": "–°–ª–æ–≤–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã",
            "service": "Linguee + PONS",
            "reason": "–¢–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",
            "config": ["linguee", "pons"]
        },
        {
            "scenario": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
            "service": "DeepL Pro",
            "reason": "–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤",
            "config": ["deepl"]
        }
    ]
    
    for i, rec in enumerate(recommendations, 1):
        print(f"\n{i}Ô∏è‚É£ {rec['scenario']}")
        print(f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec['service']}")
        print(f"   üí° –ü—Ä–∏—á–∏–Ω–∞: {rec['reason']}")
        print(f"   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {rec['config']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        results = compare_translation_services()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        demonstrate_service_features()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        show_service_recommendations()
        
        print("\n" + "=" * 80)
        print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 80)
        print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ auto_extract_translate.py —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --service")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ enhanced_translator –¥–ª—è –≤–∞—à–∏—Ö –Ω—É–∂–¥")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
