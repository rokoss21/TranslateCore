#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep-translator
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import json
import os
import time
from pathlib import Path
from typing import List, Dict, Optional, Any
import argparse
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from .config_loader import APIConfigLoader, ConfigurationError
    CONFIG_LOADER_AVAILABLE = True
except ImportError:
    try:
        from config_loader import APIConfigLoader, ConfigurationError
        CONFIG_LOADER_AVAILABLE = True
    except ImportError:
        print("‚ö†Ô∏è config_loader –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        CONFIG_LOADER_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
try:
    from .offline_translator import OfflineTranslator, OfflineTranslationResult
    OFFLINE_TRANSLATOR_AVAILABLE = True
except ImportError:
    try:
        from offline_translator import OfflineTranslator, OfflineTranslationResult
        OFFLINE_TRANSLATOR_AVAILABLE = True
    except ImportError:
        print("‚ö†Ô∏è offline_translator –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        OFFLINE_TRANSLATOR_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º deep-translator
try:
    from deep_translator import (
        GoogleTranslator,
        MyMemoryTranslator,
        LibreTranslator,
        PonsTranslator,
        LingueeTranslator,
        MicrosoftTranslator,
        YandexTranslator,
        DeeplTranslator,
        ChatGptTranslator,
        PapagoTranslator
    )
    DEEP_TRANSLATOR_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ deep-translator: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install deep-translator")
    DEEP_TRANSLATOR_AVAILABLE = False


@dataclass
class TranslationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞"""
    original: str
    translated: str
    source_lang: str
    target_lang: str
    service: str
    confidence: float = 0.0
    alternatives: List[str] = None
    
    def __post_init__(self):
        if self.alternatives is None:
            self.alternatives = []


class EnhancedTranslator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    # –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    LANGUAGE_MAPPINGS = {
        'russian': {'google': 'ru', 'libre': 'ru', 'mymemory': 'ru-RU'},
        'english': {'google': 'en', 'libre': 'en', 'mymemory': 'en-US'},
        'chinese': {'google': 'zh-cn', 'libre': 'zh', 'mymemory': 'zh'},
        'japanese': {'google': 'ja', 'libre': 'ja', 'mymemory': 'ja'},
        'korean': {'google': 'ko', 'libre': 'ko', 'mymemory': 'ko'},
        'german': {'google': 'de', 'libre': 'de', 'mymemory': 'de'},
        'french': {'google': 'fr', 'libre': 'fr', 'mymemory': 'fr'},
        'spanish': {'google': 'es', 'libre': 'es', 'mymemory': 'es'},
        'italian': {'google': 'it', 'libre': 'it', 'mymemory': 'it'},
        'portuguese': {'google': 'pt', 'libre': 'pt', 'mymemory': 'pt'},
        'arabic': {'google': 'ar', 'libre': 'ar', 'mymemory': 'ar'},
        'hebrew': {'google': 'he', 'libre': 'he', 'mymemory': 'he'},
        'thai': {'google': 'th', 'libre': 'th', 'mymemory': 'th'},
        'greek': {'google': 'el', 'libre': 'el', 'mymemory': 'el'}
    }
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    AVAILABLE_SERVICES = {
        'offline': {'class': None, 'priority': 0, 'free': True},  # –û—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        'google': {'class': GoogleTranslator, 'priority': 1, 'free': True},
        'libre': {'class': LibreTranslator, 'priority': 2, 'free': True},
        'mymemory': {'class': MyMemoryTranslator, 'priority': 3, 'free': True},
        'pons': {'class': PonsTranslator, 'priority': 4, 'free': True},
        'linguee': {'class': LingueeTranslator, 'priority': 5, 'free': True},
        'microsoft': {'class': MicrosoftTranslator, 'priority': 6, 'free': False},
        'yandex': {'class': YandexTranslator, 'priority': 7, 'free': False},
        'deepl': {'class': DeeplTranslator, 'priority': 8, 'free': False},
        'chatgpt': {'class': ChatGptTranslator, 'priority': 9, 'free': False},
        'papago': {'class': PapagoTranslator, 'priority': 10, 'free': False}
    }
    
    def __init__(self, source_lang: str, target_lang: str, 
                 preferred_services: List[str] = None,
                 cache_file: Optional[str] = None,
                 api_keys: Dict[str, str] = None,
                 config_file: Optional[str] = None,
                 service_config_name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        
        Args:
            source_lang: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
            preferred_services: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            cache_file: –§–∞–π–ª –∫–µ—à–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            api_keys: API –∫–ª—é—á–∏ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π
            service_config_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
        """
        if not DEEP_TRANSLATOR_AVAILABLE:
            raise ImportError("deep-translator –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.source_lang = source_lang.lower()
        self.target_lang = target_lang.lower()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if config_file and CONFIG_LOADER_AVAILABLE:
            try:
                config_loader = APIConfigLoader(config_file)
                if service_config_name:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ API –∫–ª—é—á–∏
                    self.preferred_services = config_loader.get_services_for_config(service_config_name)
                    loaded_api_keys = config_loader.get_api_keys(service_config_name)
                    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{service_config_name}'")
                    print(f"üîß –°–µ—Ä–≤–∏—Å—ã: {', '.join(self.preferred_services)}")
                else:
                    loaded_api_keys = config_loader.get_api_keys()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏
                self.api_keys = {**loaded_api_keys, **(api_keys or {})}
                
            except ConfigurationError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                self.api_keys = api_keys or {}
        else:
            self.api_keys = api_keys or {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        if preferred_services:
            self.preferred_services = [s.lower() for s in preferred_services]
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω + –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            if OFFLINE_TRANSLATOR_AVAILABLE:
                self.preferred_services = ['offline', 'google', 'libre', 'mymemory', 'pons']
            else:
                self.preferred_services = ['google', 'libre', 'mymemory', 'pons']
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–Ω—å—à–µ)
        self.stats = {
            'total_requests': 0,
            'cache_hits': 0,
            'service_usage': {},
            'errors': []
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à
        self.cache_file = cache_file or f"translation_cache_{self.source_lang}_{self.target_lang}.json"
        self.cache = self._load_cache()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏
        self.translators = {}
        self._init_translators()
    
    def _load_cache(self) -> Dict[str, TranslationResult]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–µ—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        cache_path = Path(self.cache_file)
        if cache_path.exists():
            try:
                with open(cache_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ TranslationResult
                    cache = {}
                    for key, value in data.items():
                        if isinstance(value, dict) and 'original' in value:
                            cache[key] = TranslationResult(**value)
                        else:
                            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–µ—à–∞
                            cache[key] = TranslationResult(
                                original=key,
                                translated=value,
                                source_lang=self.source_lang,
                                target_lang=self.target_lang,
                                service='unknown'
                            )
                    return cache
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: {e}")
        
        return {}
    
    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–µ—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TranslationResult –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON
            cache_data = {}
            for key, result in self.cache.items():
                if isinstance(result, TranslationResult):
                    cache_data[key] = {
                        'original': result.original,
                        'translated': result.translated,
                        'source_lang': result.source_lang,
                        'target_lang': result.target_lang,
                        'service': result.service,
                        'confidence': result.confidence,
                        'alternatives': result.alternatives
                    }
                else:
                    cache_data[key] = result
            
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    
    def _get_lang_code(self, lang: str, service: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        if lang in self.LANGUAGE_MAPPINGS:
            mapping = self.LANGUAGE_MAPPINGS[lang]
            return mapping.get(service, mapping.get('google', lang))
        return lang
    
    def _init_translators(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏"""
        for service_name in self.preferred_services:
            if service_name not in self.AVAILABLE_SERVICES:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service_name}")
                continue
            
            service_info = self.AVAILABLE_SERVICES[service_name]
            translator_class = service_info['class']
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                source_code = self._get_lang_code(self.source_lang, service_name)
                target_code = self._get_lang_code(self.target_lang, service_name)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if service_name == 'google':
                    translator = translator_class(source=source_code, target=target_code)
                
                elif service_name == 'libre':
                    # LibreTranslator –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å API –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
                    api_key = self.api_keys.get('libre')
                    base_url = self.api_keys.get('libre_url', 'https://libretranslate.de')
                    if api_key:
                        translator = translator_class(source=source_code, target=target_code, api_key=api_key, base_url=base_url)
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –∫–ª—é—á–∞
                        translator = translator_class(source=source_code, target=target_code, base_url=base_url)
                
                elif service_name == 'mymemory':
                    translator = translator_class(source=source_code, target=target_code)
                
                elif service_name in ['pons', 'linguee']:
                    # –î–ª—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
                    source_name = self.source_lang
                    target_name = self.target_lang
                    translator = translator_class(source=source_name, target=target_name)
                
                elif service_name == 'microsoft':
                    api_key = self.api_keys.get('microsoft')
                    if not api_key:
                        print(f"‚ö†Ô∏è Microsoft Translator —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")
                        continue
                    translator = translator_class(api_key=api_key, target=target_code)
                
                elif service_name == 'yandex':
                    api_key = self.api_keys.get('yandex')
                    if not api_key:
                        print(f"‚ö†Ô∏è Yandex Translator —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")
                        continue
                    translator = translator_class(api_key=api_key)
                
                elif service_name == 'deepl':
                    api_key = self.api_keys.get('deepl')
                    if not api_key:
                        print(f"‚ö†Ô∏è DeepL —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")
                        continue
                    translator = translator_class(api_key=api_key, source=source_code, target=target_code)
                
                elif service_name == 'chatgpt':
                    api_key = self.api_keys.get('openai') or os.getenv('OPENAI_API_KEY')
                    if not api_key:
                        print(f"‚ö†Ô∏è ChatGPT —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")
                        continue
                    translator = translator_class(api_key=api_key, target=target_code)
                
                elif service_name == 'papago':
                    client_id = self.api_keys.get('papago_client_id')
                    secret_key = self.api_keys.get('papago_secret_key')
                    if not client_id or not secret_key:
                        print(f"‚ö†Ô∏è Papago —Ç—Ä–µ–±—É–µ—Ç client_id –∏ secret_key")
                        continue
                    translator = translator_class(client_id=client_id, secret_key=secret_key, 
                                                source=source_code, target=target_code)
                
                elif service_name == 'offline':
                    # –û—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
                    if OFFLINE_TRANSLATOR_AVAILABLE:
                        translator = OfflineTranslator(
                            source_lang=self.source_lang,
                            target_lang=self.target_lang,
                            cache_file=f"offline_cache_{self.source_lang}_{self.target_lang}.json"
                        )
                    else:
                        print(f"‚ö†Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        continue
                
                else:
                    print(f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ {service_name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
                    continue
                
                self.translators[service_name] = translator
                print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫: {service_name}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {service_name}: {e}")
                self.stats['errors'].append(f"{service_name}: {str(e)}")
    
    def translate(self, text: str, use_cache: bool = True) -> TranslationResult:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
            
        Returns:
            TranslationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        """
        self.stats['total_requests'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"{text}|{self.source_lang}|{self.target_lang}"
        if use_cache and cache_key in self.cache:
            self.stats['cache_hits'] += 1
            return self.cache[cache_key]
        
        # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for service_name in self.preferred_services:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
            if service_name == 'offline' and OFFLINE_TRANSLATOR_AVAILABLE:
                try:
                    print(f"üîí –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω...")
                    
                    offline_translator = OfflineTranslator(
                        source_lang=self.source_lang,
                        target_lang=self.target_lang,
                        cache_file=f"offline_cache_{self.source_lang}_{self.target_lang}.json"
                    )
                    
                    offline_result = offline_translator.translate(text, use_cache)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                    result = TranslationResult(
                        original=offline_result.original,
                        translated=offline_result.translated,
                        source_lang=offline_result.source_lang,
                        target_lang=offline_result.target_lang,
                        service=f"offline_{offline_result.method}",
                        confidence=offline_result.confidence
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                    if use_cache:
                        self.cache[cache_key] = result
                        self._save_cache()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    service_key = f"offline_{offline_result.method}"
                    if service_key not in self.stats['service_usage']:
                        self.stats['service_usage'][service_key] = 0
                    self.stats['service_usage'][service_key] += 1
                    
                    print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –æ—Ñ—Ñ–ª–∞–π–Ω —á–µ—Ä–µ–∑ {offline_result.method} –∑–∞ {offline_result.processing_time:.2f}—Å")
                    return result
                    
                except Exception as e:
                    error_msg = f"offline: {str(e)}"
                    print(f"‚ùå {error_msg}")
                    self.stats['errors'].append(error_msg)
                    continue
            
            # –û–±—ã—á–Ω—ã–µ –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏
            if service_name not in self.translators:
                continue
            
            translator = self.translators[service_name]
            
            try:
                print(f"üåê –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ {service_name}...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                if service_name in ['pons', 'linguee']:
                    # –°–ª–æ–≤–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    translated = translator.translate(text, return_all=False)
                else:
                    translated = translator.translate(text)
                
                if not translated or translated == text:
                    print(f"‚ö†Ô∏è {service_name}: –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = TranslationResult(
                    original=text,
                    translated=translated,
                    source_lang=self.source_lang,
                    target_lang=self.target_lang,
                    service=service_name,
                    confidence=1.0
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                if use_cache:
                    self.cache[cache_key] = result
                    self._save_cache()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if service_name not in self.stats['service_usage']:
                    self.stats['service_usage'][service_name] = 0
                self.stats['service_usage'][service_name] += 1
                
                print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ {service_name}")
                return result
                
            except Exception as e:
                error_msg = f"{service_name}: {str(e)}"
                print(f"‚ùå {error_msg}")
                self.stats['errors'].append(error_msg)
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        print(f"‚ö†Ô∏è –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
        return TranslationResult(
            original=text,
            translated=text,
            source_lang=self.source_lang,
            target_lang=self.target_lang,
            service='fallback',
            confidence=0.0
        )
    
    def translate_batch(self, texts: List[str], show_progress: bool = True) -> List[TranslationResult]:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
        
        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
            show_progress: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            
        Returns:
            List[TranslationResult]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
        """
        results = []
        total = len(texts)
        
        for i, text in enumerate(texts):
            if show_progress and i % 10 == 0:
                progress = (i / total) * 100
                print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total} ({progress:.1f}%)")
            
            result = self.translate(text)
            results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < total - 1:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                time.sleep(0.1)
        
        if show_progress:
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {total}/{total} (100.0%)")
        
        return results
    
    def get_available_languages(self, service: str = 'google') -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        if service not in self.translators:
            return []
        
        try:
            translator = self.translators[service]
            return translator.get_supported_languages()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –¥–ª—è {service}: {e}")
            return []
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            'total_requests': self.stats['total_requests'],
            'cache_hits': self.stats['cache_hits'],
            'cache_hit_rate': (self.stats['cache_hits'] / max(1, self.stats['total_requests'])) * 100,
            'cache_size': len(self.cache),
            'service_usage': self.stats['service_usage'],
            'active_services': list(self.translators.keys()),
            'errors_count': len(self.stats['errors']),
            'errors': self.stats['errors'][-5:] if self.stats['errors'] else []  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
        }
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        self.cache = {}
        if os.path.exists(self.cache_file):
            os.remove(self.cache_file)
        print(f"‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω")


def get_available_services() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    if not DEEP_TRANSLATOR_AVAILABLE:
        return []
    return list(EnhancedTranslator.AVAILABLE_SERVICES.keys())


def install_requirements():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    print()
    print("–û—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:")
    print("  pip install deep-translator")
    print()
    print("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("  pip install deep-translator[ai]     # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ChatGPT")
    print("  pip install deep-translator[pdf]    # –ü–µ—Ä–µ–≤–æ–¥ PDF —Ñ–∞–π–ª–æ–≤") 
    print("  pip install deep-translator[docx]   # –ü–µ—Ä–µ–≤–æ–¥ DOCX —Ñ–∞–π–ª–æ–≤")
    print()
    print("–í—Å–µ —Å—Ä–∞–∑—É:")
    print("  pip install 'deep-translator[ai,pdf,docx]'")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parser = argparse.ArgumentParser(
        description="–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    )
    
    parser.add_argument('--source', '-s', default='russian',
                       help='–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫')
    
    parser.add_argument('--target', '-t', default='english',
                       help='–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫')
    
    parser.add_argument('--text', required=True,
                       help='–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
    
    parser.add_argument('--services', nargs='+', 
                       default=['google', 'libre', 'mymemory'],
                       help='–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã')
    
    parser.add_argument('--show-alternatives', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã')
    
    parser.add_argument('--install-deps', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
    
    args = parser.parse_args()
    
    if args.install_deps:
        install_requirements()
        return
    
    if not DEEP_TRANSLATOR_AVAILABLE:
        print("‚ùå deep-translator –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        install_requirements()
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
    translator = EnhancedTranslator(
        source_lang=args.source,
        target_lang=args.target,
        preferred_services=args.services
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    print(f"üåê –ü–µ—Ä–µ–≤–æ–¥: {args.source} ‚Üí {args.target}")
    print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {args.text}")
    print("-" * 50)
    
    result = translator.translate(args.text)
    
    print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result.translated}")
    print(f"üîß –°–µ—Ä–≤–∏—Å: {result.service}")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
    
    if args.show_alternatives and result.alternatives:
        print(f"üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {', '.join(result.alternatives)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = translator.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"  –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: {stats['cache_hits']}")
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {len(stats['active_services'])}")


if __name__ == "__main__":
    main()
