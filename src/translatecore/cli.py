#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TranslateCore CLI - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–¥–æ–±—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import argparse
import sys
import json
import os
from pathlib import Path
from typing import List, Dict, Optional, Any
import time
import subprocess
import signal
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from .enhanced_translator import EnhancedTranslator
    from .offline_translator import OfflineTranslator
    from .config_loader import APIConfigLoader, ConfigurationError
except ImportError as e:
    # Fallback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    try:
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))
        from src.translatecore.enhanced_translator import EnhancedTranslator
        from src.translatecore.offline_translator import OfflineTranslator
        from src.translatecore.config_loader import APIConfigLoader, ConfigurationError
    except ImportError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def colored_print(text: str, color: str = Colors.ENDC, bold: bool = False):
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    if bold:
        print(f"{Colors.BOLD}{color}{text}{Colors.ENDC}")
    else:
        print(f"{color}{text}{Colors.ENDC}")

def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä —É—Ç–∏–ª–∏—Ç—ã"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üåç TranslateCore CLI                     ‚ïë
‚ïë              –ú–æ—â–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤             ‚ïë
‚ïë                   –û—Ñ—Ñ–ª–∞–π–Ω + –û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å—ã                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    colored_print(banner, Colors.CYAN, bold=True)

def print_error(message: str):
    """–ü–µ—á–∞—Ç—å –æ—à–∏–±–∫–∏"""
    colored_print(f"‚ùå {message}", Colors.FAIL)

def print_success(message: str):
    """–ü–µ—á–∞—Ç—å —É—Å–ø–µ—Ö–∞"""
    colored_print(f"‚úÖ {message}", Colors.GREEN)

def print_warning(message: str):
    """–ü–µ—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    colored_print(f"‚ö†Ô∏è {message}", Colors.WARNING)

def print_info(message: str):
    """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    colored_print(f"üí° {message}", Colors.BLUE)

class TranslateCLI:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å CLI —É—Ç–∏–ª–∏—Ç—ã"""
    
    def __init__(self):
        self.config_file = "translation_api_config.json"
        self.translator = None
        self.history_file = Path.home() / ".translate_history.json"
        self.settings_file = Path.home() / ".translate_settings.json"
        self.settings = self.load_settings()
    
    def load_settings(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        default_settings = {
            'default_source': 'auto',
            'default_target': 'english',
            'default_service_config': 'development',
            'show_stats': True,
            'save_history': True,
            'use_colors': True,
            'preferred_method': 'auto'
        }
        
        if self.settings_file.exists():
            try:
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    user_settings = json.load(f)
                    default_settings.update(user_settings)
            except Exception as e:
                print_warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        return default_settings
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def get_language_choices(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        base_languages = ['auto', 'russian', 'english', 'chinese', 'japanese', 'korean', 
                         'german', 'french', 'spanish', 'italian', 'portuguese', 
                         'arabic', 'dutch', 'czech', 'ukrainian', 'polish']
        return base_languages
    
    def get_config_choices(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        try:
            if Path(self.config_file).exists():
                loader = APIConfigLoader(self.config_file)
                return list(loader.list_available_configs().keys())
        except:
            pass
        return ['offline_only', 'development', 'production_basic']
    
    def detect_language(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
        cyrillic_chars = sum(1 for c in text if '\u0400' <= c <= '\u04FF')
        if cyrillic_chars / len(text) > 0.3:
            return 'russian'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
        chinese_chars = sum(1 for c in text if '\u4e00' <= c <= '\u9fff')
        if chinese_chars > 0:
            return 'chinese'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        return 'english'
    
    def smart_translate(self, text: str, source_lang: str = None, target_lang: str = None, 
                       service_config: str = None) -> Dict[str, Any]:
        """–£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º"""
        
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
        if not source_lang or source_lang == 'auto':
            source_lang = self.detect_language(text)
            print_info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫: {source_lang}")
        
        # –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not target_lang:
            target_lang = 'english' if source_lang != 'english' else 'russian'
            print_info(f"–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: {target_lang}")
        
        # –°–µ—Ä–≤–∏—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        service_config = service_config or self.settings['default_service_config']
        
        start_time = time.time()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
            translator = EnhancedTranslator(
                source_lang=source_lang,
                target_lang=target_lang,
                config_file=self.config_file,
                service_config_name=service_config
            )
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º
            result = translator.translate(text)
            
            processing_time = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if self.settings['save_history']:
                self.save_to_history(text, result.translated, source_lang, target_lang, result.service)
            
            return {
                'success': True,
                'original': text,
                'translated': result.translated,
                'source_lang': source_lang,
                'target_lang': target_lang,
                'service': result.service,
                'processing_time': processing_time,
                'stats': translator.get_stats() if hasattr(translator, 'get_stats') else None
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'original': text
            }
    
    def save_to_history(self, original: str, translated: str, source_lang: str, 
                       target_lang: str, service: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            history = []
            if self.history_file.exists():
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
            
            history.append({
                'timestamp': datetime.now().isoformat(),
                'original': original,
                'translated': translated,
                'source_lang': source_lang,
                'target_lang': target_lang,
                'service': service
            })
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            history = history[-100:]
            
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def show_history(self, limit: int = 10):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        if not self.history_file.exists():
            print_info("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞")
            return
        
        try:
            with open(self.history_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
            
            if not history:
                print_info("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞")
                return
            
            colored_print("\nüìö –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", Colors.HEADER, bold=True)
            print("=" * 70)
            
            for i, entry in enumerate(reversed(history[-limit:]), 1):
                timestamp = datetime.fromisoformat(entry['timestamp']).strftime('%Y-%m-%d %H:%M')
                
                print(f"\n{i}. [{timestamp}] {entry['source_lang']} ‚Üí {entry['target_lang']}")
                colored_print(f"   üìù {entry['original']}", Colors.CYAN)
                colored_print(f"   üîÑ {entry['translated']}", Colors.GREEN)
                colored_print(f"   üîß {entry['service']}", Colors.WARNING)
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
        print_banner()
        colored_print("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞", Colors.HEADER, bold=True)
        print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                colored_print("üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", Colors.BLUE, bold=True)
                text = input("‚û§ ").strip()
                
                if not text:
                    continue
                
                if text.lower() in ['quit', 'exit', 'q']:
                    colored_print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", Colors.GREEN, bold=True)
                    break
                
                if text.lower() == 'help':
                    self.show_interactive_help()
                    continue
                
                if text.lower() == 'settings':
                    self.interactive_settings()
                    continue
                
                if text.lower() == 'history':
                    self.show_history()
                    continue
                
                if text.lower() == 'stats':
                    self.show_system_stats()
                    continue
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º
                result = self.smart_translate(text)
                
                if result['success']:
                    print("\n" + "‚îÄ" * 50)
                    colored_print(f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª:  {result['original']}", Colors.CYAN)
                    colored_print(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥:   {result['translated']}", Colors.GREEN, bold=True)
                    colored_print(f"üåê –ú–∞—Ä—à—Ä—É—Ç:   {result['source_lang']} ‚Üí {result['target_lang']}", Colors.WARNING)
                    colored_print(f"üîß –°–µ—Ä–≤–∏—Å:    {result['service']}", Colors.BLUE)
                    colored_print(f"‚è±Ô∏è –í—Ä–µ–º—è:     {result['processing_time']:.2f}—Å", Colors.WARNING)
                    
                    if result['stats'] and self.settings['show_stats']:
                        stats = result['stats']
                        colored_print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤", Colors.BLUE)
                else:
                    print_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {result['error']}")
                
                print("‚îÄ" * 50 + "\n")
                
            except KeyboardInterrupt:
                colored_print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", Colors.GREEN, bold=True)
                break
            except Exception as e:
                print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def show_interactive_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç help –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        help_text = """
üÜò –ö–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:

üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
   ‚Ä¢ help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
   ‚Ä¢ settings      - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
   ‚Ä¢ history       - –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   ‚Ä¢ stats         - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   ‚Ä¢ quit/exit/q   - –í—ã—Ö–æ–¥

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π 'settings'
üìö –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
üîÑ –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""
        colored_print(help_text, Colors.BLUE)
    
    def interactive_settings(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        colored_print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TranslateCore CLI", Colors.HEADER, bold=True)
        print("=" * 40)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nüìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        for key, value in self.settings.items():
            colored_print(f"  ‚Ä¢ {key}: {value}", Colors.CYAN)
        
        print("\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print("1. default_target - —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("2. default_service_config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é") 
        print("3. show_stats - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("4. save_history - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        
        if choice == "1":
            languages = self.get_language_choices()
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {', '.join(languages)}")
            new_lang = input("–ù–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫: ").strip().lower()
            if new_lang in languages:
                self.settings['default_target'] = new_lang
                self.save_settings()
                print_success(f"–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_lang}")
        
        elif choice == "2":
            configs = self.get_config_choices()
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join(configs)}")
            new_config = input("–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ").strip()
            if new_config in configs:
                self.settings['default_service_config'] = new_config
                self.save_settings()
                print_success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_config}")
        
        elif choice == "3":
            new_stats = input("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? (y/n): ").strip().lower()
            self.settings['show_stats'] = new_stats in ['y', 'yes', '–¥–∞']
            self.save_settings()
            print_success(f"–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {self.settings['show_stats']}")
        
        elif choice == "4":
            new_history = input("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é? (y/n): ").strip().lower()
            self.settings['save_history'] = new_history in ['y', 'yes', '–¥–∞']
            self.save_settings()
            print_success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: {self.settings['save_history']}")
    
    def show_system_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        colored_print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã TranslateCore", Colors.HEADER, bold=True)
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        try:
            from .offline_translator import OfflineTranslator
            offline = OfflineTranslator('russian', 'english')
            methods = offline.available_methods
            colored_print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–ª–∞–π–Ω –º–µ—Ç–æ–¥—ã: {', '.join(methods)}", Colors.GREEN)
        except ImportError:
            try:
                from offline_translator import OfflineTranslator
                offline = OfflineTranslator('russian', 'english')
                methods = offline.available_methods
                colored_print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–ª–∞–π–Ω –º–µ—Ç–æ–¥—ã: {', '.join(methods)}", Colors.GREEN)
            except Exception as e:
                colored_print(f"‚ùå –û—Ñ—Ñ–ª–∞–π–Ω –º–µ—Ç–æ–¥—ã: {e}", Colors.FAIL)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            loader = APIConfigLoader(self.config_file)
            configs = loader.list_available_configs()
            colored_print(f"‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(configs)}", Colors.BLUE)
            for name, config in configs.items():
                try:
                    validation = loader.validate_config(name)
                    status = "‚úÖ" if validation['valid'] else "‚ùå"
                    print(f"   ‚Ä¢ {status} {name}: {config['name']}")
                except:
                    print(f"   ‚Ä¢ ‚ùå {name}: {config['name']}")
        except Exception as e:
            colored_print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", Colors.FAIL)
        
        # –ò—Å—Ç–æ—Ä–∏—è
        if self.history_file.exists():
            try:
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
                colored_print(f"üìö –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}", Colors.CYAN)
            except:
                colored_print("üìö –ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", Colors.WARNING)
        else:
            colored_print("üìö –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", Colors.WARNING)
    
    def setup_wizard(self):
        """–ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print_banner()
        colored_print("üéØ –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TranslateCore CLI", Colors.HEADER, bold=True)
        print("–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞!\n")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        colored_print("–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", Colors.BLUE, bold=True)
        
        try:
            import argostranslate
            print_success("Argos Translate —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print_warning("Argos Translate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            install = input("–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Argos Translate? (y/n): ").strip().lower()
            if install in ['y', 'yes', '–¥–∞']:
                os.system("pip install argostranslate")
                print_success("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Argos Translate –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        colored_print("\n–®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", Colors.BLUE, bold=True)
        configs = self.get_config_choices()
        
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for i, config in enumerate(configs, 1):
            print(f"  {i}. {config}")
        
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 - development): ") or "2")
            if 1 <= choice <= len(configs):
                self.settings['default_service_config'] = configs[choice - 1]
                print_success(f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {configs[choice - 1]}")
        except:
            print_info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: development")
        
        # –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        colored_print("\n–®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", Colors.BLUE, bold=True)
        
        stats_choice = input("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
        self.settings['show_stats'] = stats_choice != 'n'
        
        history_choice = input("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower() 
        self.settings['save_history'] = history_choice != 'n'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_settings()
        
        colored_print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", Colors.GREEN, bold=True)
        print_info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'translate-cli' –∏–ª–∏ 'translate-cli -i' –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")

def create_argument_parser(cli: TranslateCLI) -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    
    parser = argparse.ArgumentParser(
        prog='translate-cli',
        description='üåç TranslateCore CLI - –ú–æ—â–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  translate-cli "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!"                    # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥
  translate-cli -s russian -t english "–¢–µ–∫—Å—Ç"   # –° —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤
  translate-cli -i                               # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  translate-cli -c offline_only "–¢–µ–∫—Å—Ç"         # –¢–æ–ª—å–∫–æ –æ—Ñ—Ñ–ª–∞–π–Ω
  translate-cli --history                        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
  translate-cli --setup                          # –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
  offline_only      - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ñ—Ñ–ª–∞–π–Ω
  development       - –û—Ñ—Ñ–ª–∞–π–Ω + –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–Ω–ª–∞–π–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
  production_basic  - –û—Ñ—Ñ–ª–∞–π–Ω + –ø—Ä–µ–º–∏—É–º —Å–µ—Ä–≤–∏—Å—ã
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument('text', nargs='?', 
                       help='–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
    
    parser.add_argument('-s', '--source', 
                       choices=cli.get_language_choices(),
                       default='auto',
                       help='–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)')
    
    parser.add_argument('-t', '--target',
                       choices=cli.get_language_choices(),
                       help='–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)')
    
    parser.add_argument('-c', '--config',
                       choices=cli.get_config_choices(),
                       help='–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)')
    
    parser.add_argument('-f', '--file',
                       type=str,
                       help='–§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
    
    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    parser.add_argument('-i', '--interactive',
                       action='store_true',
                       help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    
    parser.add_argument('--setup',
                       action='store_true', 
                       help='–ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--history',
                       action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤')
    
    parser.add_argument('--stats',
                       action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã')
    
    parser.add_argument('--configs',
                       action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    parser.add_argument('--languages',
                       action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏')
    
    # –£—Ç–∏–ª–∏—Ç—ã
    parser.add_argument('--install-deps',
                       action='store_true',
                       help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    
    parser.add_argument('--clear-history',
                       action='store_true',
                       help='–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤')
    
    parser.add_argument('--export-history',
                       type=str,
                       metavar='FILE',
                       help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞
    parser.add_argument('--no-colors',
                       action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥')
    
    parser.add_argument('--quiet', '-q',
                       action='store_true',
                       help='–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)')
    
    parser.add_argument('--verbose', '-v',
                       action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    parser.add_argument('--code-mode',
                       action='store_true',
                       help='Code-aware translation (preserves syntax)')
    
    parser.add_argument('--translate-strings',
                       action='store_true',
                       help='Also translate string literals in code mode')
    
    return parser

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    cli = TranslateCLI()
    parser = create_argument_parser(cli)
    args = parser.parse_args()
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.no_colors:
        Colors.HEADER = Colors.BLUE = Colors.CYAN = Colors.GREEN = Colors.WARNING = Colors.FAIL = Colors.ENDC = Colors.BOLD = Colors.UNDERLINE = ''
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if args.setup:
            cli.setup_wizard()
            return
        
        if args.interactive:
            cli.interactive_mode()
            return
        
        if args.history:
            cli.show_history()
            return
        
        if args.stats:
            cli.show_system_stats()
            return
        
        if args.configs:
            try:
                loader = APIConfigLoader(cli.config_file)
                configs = loader.list_available_configs()
                colored_print("\n‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", Colors.HEADER, bold=True)
                for name, config in configs.items():
                    try:
                        validation = loader.validate_config(name)
                        status = "‚úÖ" if validation['valid'] else "‚ùå"
                        print(f"  {status} {name}: {config['name']}")
                        print(f"      {config['description']}")
                        
                        if not validation['valid'] and validation['errors']:
                            for error in validation['errors'][:1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
                                print(f"      ‚ùå {error}")
                        
                        if validation['warnings']:
                            for warning in validation['warnings'][:1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                                print(f"      ‚ö†Ô∏è {warning}")
                    except Exception as e:
                        print(f"  ‚ùå {name}: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - {e}")
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return
        
        if args.languages:
            languages = cli.get_language_choices()
            colored_print("\nüåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:", Colors.HEADER, bold=True)
            for lang in languages:
                print(f"  ‚Ä¢ {lang}")
            return
        
        if args.install_deps:
            os.system("pip install argostranslate")
            print_success("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
        
        if args.clear_history:
            if cli.history_file.exists():
                cli.history_file.unlink()
                print_success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
            else:
                print_info("–ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞")
            return
        
        if args.export_history:
            if cli.history_file.exists():
                import shutil
                shutil.copy(cli.history_file, args.export_history)
                print_success(f"–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤: {args.export_history}")
            else:
                print_error("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        text = None
        
        if args.file:
            try:
                with open(args.file, 'r', encoding='utf-8') as f:
                    text = f.read().strip()
                print_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {args.file}")
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                return
        elif args.text:
            text = args.text
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            cli.interactive_mode()
            return
        
        if not text:
            print_error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        if not args.quiet:
            print_banner()
        
        target_lang = args.target or cli.settings['default_target']
        service_config = args.config or cli.settings['default_service_config']
        
        result = cli.smart_translate(
            text=text,
            source_lang=args.source,
            target_lang=target_lang,
            service_config=service_config
        )
        
        if result['success']:
            if args.quiet:
                # –¢–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print(result['translated'])
            else:
                # –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥
                print("\n" + "‚ïê" * 60)
                colored_print(f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª:  {result['original']}", Colors.CYAN)
                colored_print(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥:   {result['translated']}", Colors.GREEN, bold=True)
                colored_print(f"üåê –ú–∞—Ä—à—Ä—É—Ç:   {result['source_lang']} ‚Üí {result['target_lang']}", Colors.WARNING)
                colored_print(f"üîß –°–µ—Ä–≤–∏—Å:    {result['service']}", Colors.BLUE)
                colored_print(f"‚è±Ô∏è –í—Ä–µ–º—è:     {result['processing_time']:.2f}—Å", Colors.WARNING)
                
                if result['stats'] and cli.settings['show_stats'] and args.verbose:
                    stats = result['stats']
                    colored_print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤", Colors.BLUE)
                
                print("‚ïê" * 60)
        else:
            print_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {result['error']}")
            if args.verbose:
                print_info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    except KeyboardInterrupt:
        colored_print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Colors.WARNING)
    except Exception as e:
        print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()
