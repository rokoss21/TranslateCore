#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å API –∫–ª—é—á–∞–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""

import json
import os
from pathlib import Path
from typing import Dict, List, Optional, Any
import sys


class ConfigurationError(Exception):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


class APIConfigLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π"""
    
    def __init__(self, config_file: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_file = config_file or "translation_api_config.json"
        self.config_data = None
        self._load_config()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        config_path = Path(self.config_file)
        
        if not config_path.exists():
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ template —Ñ–∞–π–ª
            template_path = Path("translation_api_config.template.json")
            if template_path.exists():
                raise ConfigurationError(
                    f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    f"üí° –ù–∞–π–¥–µ–Ω template —Ñ–∞–π–ª. –í—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                    f"   cp translation_api_config.template.json {self.config_file}\n"
                    f"   # –ó–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ {self.config_file} –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏"
                )
            else:
                raise ConfigurationError(
                    f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    f"üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å API –∫–ª—é—á–∞–º–∏."
                )
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                self.config_data = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ template —Ñ–∞–π–ª
            if self.config_data.get('template', False):
                raise ConfigurationError(
                    f"‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è template —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!\n"
                    f"üí° –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_*_API_KEY_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –≤ {self.config_file}"
                )
                
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_file}")
            
        except json.JSONDecodeError as e:
            raise ConfigurationError(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {self.config_file}: {e}")
    
    def get_api_keys(self, service_config_name: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            service_config_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å API –∫–ª—é—á–∞–º–∏
        """
        if not self.config_data:
            raise ConfigurationError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        api_keys = {}
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –∫–ª—é—á–∏
        if service_config_name:
            service_config = self.get_service_config(service_config_name)
            required_keys = service_config.get('required_keys', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–ª—é—á–µ–π
            missing_keys = []
            for key_name in required_keys:
                if key_name not in self.config_data['api_keys']:
                    missing_keys.append(key_name)
                    continue
                
                key_data = self.config_data['api_keys'][key_name]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–ª—é—á–µ–π
                if key_name == 'papago':
                    if not key_data.get('client_id') or not key_data.get('secret_key'):
                        missing_keys.append(f"{key_name} (client_id –∏ secret_key)")
                elif key_name == 'libre':
                    # LibreTranslate –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–ª—é—á–∞
                    pass
                else:
                    if not key_data.get('key') or key_data['key'].startswith('YOUR_'):
                        missing_keys.append(key_name)
            
            if missing_keys:
                raise ConfigurationError(
                    f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{service_config_name}':\n"
                    f"   –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏: {', '.join(missing_keys)}\n"
                    f"üí° –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ {self.config_file}"
                )
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ API –∫–ª—é—á–∏
        for service_name, key_data in self.config_data['api_keys'].items():
            if service_name == 'papago':
                if key_data.get('client_id') and key_data.get('secret_key'):
                    if not key_data['client_id'].startswith('YOUR_'):
                        api_keys['papago_client_id'] = key_data['client_id']
                        api_keys['papago_secret_key'] = key_data['secret_key']
            elif service_name == 'libre':
                if key_data.get('key') and not key_data['key'].startswith('YOUR_'):
                    api_keys['libre'] = key_data['key']
                if key_data.get('base_url'):
                    api_keys['libre_url'] = key_data['base_url']
            else:
                if key_data.get('key') and not key_data['key'].startswith('YOUR_'):
                    api_keys[service_name] = key_data['key']
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_keys = {
            'deepl': 'DEEPL_API_KEY',
            'openai': 'OPENAI_API_KEY',
            'microsoft': 'MICROSOFT_API_KEY',
            'yandex': 'YANDEX_API_KEY',
            'libre': 'LIBRE_API_KEY'
        }
        
        for service, env_var in env_keys.items():
            env_value = os.getenv(env_var)
            if env_value and service not in api_keys:
                api_keys[service] = env_value
                print(f"üåç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω API –∫–ª—é—á {service} –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        return api_keys
    
    def get_service_config(self, config_name: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            config_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–∞
        """
        if not self.config_data:
            raise ConfigurationError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        service_configs = self.config_data.get('service_configurations', {})
        
        if config_name not in service_configs:
            available = ', '.join(service_configs.keys())
            raise ConfigurationError(
                f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n"
                f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {available}"
            )
        
        return service_configs[config_name]
    
    def get_services_for_config(self, config_name: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤
        """
        config = self.get_service_config(config_name)
        return config.get('services', [])
    
    def list_available_configs(self) -> Dict[str, Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        """
        if not self.config_data:
            raise ConfigurationError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config_data.get('service_configurations', {})
    
    def validate_config(self, config_name: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        result = {
            'valid': True,
            'errors': [],
            'warnings': [],
            'missing_keys': [],
            'available_services': []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            service_config = self.get_service_config(config_name)
            services = service_config.get('services', [])
            required_keys = service_config.get('required_keys', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
            try:
                api_keys = self.get_api_keys(config_name)
                result['available_services'] = list(api_keys.keys())
            except ConfigurationError as e:
                result['valid'] = False
                result['errors'].append(str(e))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
                for key_name in required_keys:
                    if key_name not in self.config_data.get('api_keys', {}):
                        result['missing_keys'].append(key_name)
                    else:
                        key_data = self.config_data['api_keys'][key_name]
                        if isinstance(key_data.get('key', ''), str) and key_data['key'].startswith('YOUR_'):
                            result['missing_keys'].append(key_name)
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if 'google' not in services and 'offline' not in services:
                result['warnings'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å Google Translate –∏–ª–∏ offline –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
            
            if len(services) == 1 and services[0] not in ['google', 'offline']:
                result['warnings'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å (Google –∏–ª–∏ offline)")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
            if 'offline' in services:
                result['warnings'].append("–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Argos Translate –∏–ª–∏ –∑–∞–ø—É—â–µ–Ω LibreTranslate")
                
        except ConfigurationError as e:
            result['valid'] = False
            result['errors'].append(str(e))
        
        return result
    
    def print_config_status(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"\nüìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({self.config_file}):")
        print("=" * 50)
        
        configs = self.list_available_configs()
        
        for config_name, config_data in configs.items():
            print(f"\nüîß {config_name}: {config_data['name']}")
            print(f"   üìù {config_data['description']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            validation = self.validate_config(config_name)
            
            if validation['valid']:
                print("   ‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                if validation['available_services']:
                    print(f"   üåê –°–µ—Ä–≤–∏—Å—ã: {', '.join(validation['available_services'])}")
            else:
                print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                if validation['missing_keys']:
                    print(f"   üîë –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏: {', '.join(validation['missing_keys'])}")
            
            if validation['warnings']:
                for warning in validation['warnings']:
                    print(f"   ‚ö†Ô∏è {warning}")
            
            if config_data.get('recommended'):
                print("   ‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")


def create_example_config():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å API –∫–ª—é—á–∞–º–∏"""
    config_file = "translation_api_config.json"
    
    if Path(config_file).exists():
        print(f"‚ö†Ô∏è –§–∞–π–ª {config_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—É—Å—Ç—ã–º–∏ –∫–ª—é—á–∞–º–∏
    template_path = Path("translation_api_config.template.json")
    
    if template_path.exists():
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ template
        with open(template_path, 'r', encoding='utf-8') as f:
            template_data = json.load(f)
        
        # –£–¥–∞–ª—è–µ–º template —Ñ–ª–∞–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏ –Ω–∞ –ø—É—Å—Ç—ã–µ
        template_data['template'] = False
        for service_name, service_data in template_data['api_keys'].items():
            if 'key' in service_data:
                service_data['key'] = ""
            if service_name == 'papago':
                service_data['client_id'] = ""
                service_data['secret_key'] = ""
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(template_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")
        print(f"üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        return True
    else:
        print("‚ùå Template —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π API –∫–ª—é—á–µ–π")
    parser.add_argument('--config-file', default='translation_api_config.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--create-example', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--validate', metavar='CONFIG_NAME',
                       help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    parser.add_argument('--list', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    if args.create_example:
        create_example_config()
        return
    
    try:
        loader = APIConfigLoader(args.config_file)
        
        if args.list:
            loader.print_config_status()
        elif args.validate:
            result = loader.validate_config(args.validate)
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{args.validate}':")
            
            if result['valid']:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            else:
                print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:")
                for error in result['errors']:
                    print(f"   ‚Ä¢ {error}")
            
            if result['warnings']:
                print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                for warning in result['warnings']:
                    print(f"   ‚Ä¢ {warning}")
        else:
            loader.print_config_status()
            
    except ConfigurationError as e:
        print(f"‚ùå {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
