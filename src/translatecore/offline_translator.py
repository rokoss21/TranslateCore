#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å LibreTranslate
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API, –ø–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
"""

import json
import os
import time
import subprocess
import sys
from pathlib import Path
from typing import List, Dict, Optional, Any
from dataclasses import dataclass
import requests
import threading
import signal

# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å argostranslate –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
try:
    import argostranslate.package
    import argostranslate.translate
    ARGOS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è argostranslate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LibreTranslate —Å–µ—Ä–≤–µ—Ä")
    ARGOS_AVAILABLE = False


@dataclass
class OfflineTranslationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥–∞"""
    original: str
    translated: str
    source_lang: str
    target_lang: str
    method: str  # 'argos_direct', 'libretranslate_local', 'libretranslate_docker'
    confidence: float = 1.0
    processing_time: float = 0.0


class OfflineTranslator:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"""
    
    LANGUAGE_CODES = {
        'russian': {'code': 'ru', 'name': 'Russian'},
        'english': {'code': 'en', 'name': 'English'},
        'chinese': {'code': 'zh', 'name': 'Chinese'},
        'japanese': {'code': 'ja', 'name': 'Japanese'},
        'korean': {'code': 'ko', 'name': 'Korean'},
        'german': {'code': 'de', 'name': 'German'},
        'french': {'code': 'fr', 'name': 'French'},
        'spanish': {'code': 'es', 'name': 'Spanish'},
        'italian': {'code': 'it', 'name': 'Italian'},
        'portuguese': {'code': 'pt', 'name': 'Portuguese'},
        'arabic': {'code': 'ar', 'name': 'Arabic'},
        'dutch': {'code': 'nl', 'name': 'Dutch'},
        'czech': {'code': 'cs', 'name': 'Czech'},
        'ukrainian': {'code': 'uk', 'name': 'Ukrainian'},
        'bulgarian': {'code': 'bg', 'name': 'Bulgarian'},
        'hungarian': {'code': 'hu', 'name': 'Hungarian'},
        'catalan': {'code': 'ca', 'name': 'Catalan'}
    }
    
    def __init__(self, source_lang: str, target_lang: str, 
                 cache_file: Optional[str] = None,
                 libretranslate_url: Optional[str] = None,
                 prefer_method: str = 'auto'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        
        Args:
            source_lang: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
            cache_file: –§–∞–π–ª –∫–µ—à–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            libretranslate_url: URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LibreTranslate —Å–µ—Ä–≤–µ—Ä–∞
            prefer_method: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ ('auto', 'argos', 'libretranslate', 'docker')
        """
        self.source_lang = source_lang.lower()
        self.target_lang = target_lang.lower()
        self.libretranslate_url = libretranslate_url or "http://localhost:5000"
        self.prefer_method = prefer_method
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'cache_hits': 0,
            'argos_translations': 0,
            'libretranslate_translations': 0,
            'docker_translations': 0,
            'errors': []
        }
        
        # –ö–µ—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.cache_file = cache_file or f"offline_cache_{self.source_lang}_{self.target_lang}.json"
        self.cache = self._load_cache()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        self.available_methods = self._check_available_methods()
        
        if not self.available_methods:
            raise RuntimeError("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥–∞!")
        
        print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {', '.join(self.available_methods)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if 'argos' in self.available_methods:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Argos Translate - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        elif 'libretranslate' in self.available_methods or 'docker' in self.available_methods:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Argos Translate –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: pip install argostranslate")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Argos –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if 'argos' in self.available_methods:
            self._init_argos()
    
    def _load_cache(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–µ—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        if Path(self.cache_file).exists():
            try:
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: {e}")
        return {}
    
    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–µ—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    
    def _check_available_methods(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
        methods = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π Argos
        if ARGOS_AVAILABLE:
            methods.append('argos')
            print("‚úÖ Argos Translate –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π LibreTranslate —Å–µ—Ä–≤–µ—Ä
        try:
            response = requests.get(f"{self.libretranslate_url}/languages", timeout=2)
            if response.status_code == 200:
                methods.append('libretranslate')
                print(f"‚úÖ LibreTranslate —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {self.libretranslate_url}")
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        try:
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                methods.append('docker')
                print("‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ LibreTranslate")
        except:
            pass
        
        return methods
    
    def _ensure_language_package(self, from_code: str, to_code: str) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–µ–Ω"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–∞–∫–µ—Ç–æ–≤
            argostranslate.package.update_package_index()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç
            installed_packages = argostranslate.package.get_installed_packages()
            is_installed = any(
                p.from_code == from_code and p.to_code == to_code 
                for p in installed_packages
            )
            
            if is_installed:
                return True
                
            # –ò—â–µ–º –ø–∞–∫–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            available_packages = argostranslate.package.get_available_packages()
            package = next(
                (pkg for pkg in available_packages 
                 if pkg.from_code == from_code and pkg.to_code == to_code), 
                None
            )
            
            if package:
                print(f"üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ–º —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç: {from_code}‚Üí{to_code}...")
                print("   (—ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)")
                argostranslate.package.install_from_path(package.download())
                print(f"‚úÖ –Ø–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç {from_code}‚Üí{to_code} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                print(f"‚ö†Ô∏è –Ø–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç {from_code}‚Üí{to_code} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Argos")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–∞ {from_code}‚Üí{to_code}: {e}")
            return False
    
    def _init_argos(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Argos Translate —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–∞–∫–µ—Ç–æ–≤"""
        if not ARGOS_AVAILABLE:
            return
        
        try:
            source_code = self.LANGUAGE_CODES[self.source_lang]['code']
            target_code = self.LANGUAGE_CODES[self.target_lang]['code']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if self._ensure_language_package(source_code, target_code):
                print(f"‚úÖ Argos Translate –≥–æ—Ç–æ–≤ –¥–ª—è {self.source_lang} ‚Üí {self.target_lang}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç {self.source_lang} ‚Üí {self.target_lang}")
                self.available_methods = [m for m in self.available_methods if m != 'argos']
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Argos: {e}")
            self.available_methods = [m for m in self.available_methods if m != 'argos']
    
    def translate_with_argos(self, text: str) -> OfflineTranslationResult:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Argos Translate –Ω–∞–ø—Ä—è–º—É—é"""
        if not ARGOS_AVAILABLE or 'argos' not in self.available_methods:
            raise RuntimeError("Argos Translate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        start_time = time.time()
        
        try:
            source_code = self.LANGUAGE_CODES[self.source_lang]['code']
            target_code = self.LANGUAGE_CODES[self.target_lang]['code']
            
            translated = argostranslate.translate.translate(text, source_code, target_code)
            processing_time = time.time() - start_time
            
            self.stats['argos_translations'] += 1
            
            return OfflineTranslationResult(
                original=text,
                translated=translated,
                source_lang=self.source_lang,
                target_lang=self.target_lang,
                method='argos_direct',
                processing_time=processing_time
            )
            
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ Argos –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
    
    def translate_with_libretranslate(self, text: str) -> OfflineTranslationResult:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π LibreTranslate —Å–µ—Ä–≤–µ—Ä"""
        if 'libretranslate' not in self.available_methods:
            raise RuntimeError("LibreTranslate —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        start_time = time.time()
        
        try:
            source_code = self.LANGUAGE_CODES[self.source_lang]['code']
            target_code = self.LANGUAGE_CODES[self.target_lang]['code']
            
            response = requests.post(
                f"{self.libretranslate_url}/translate",
                json={
                    'q': text,
                    'source': source_code,
                    'target': target_code
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                translated = result['translatedText']
                processing_time = time.time() - start_time
                
                self.stats['libretranslate_translations'] += 1
                
                return OfflineTranslationResult(
                    original=text,
                    translated=translated,
                    source_lang=self.source_lang,
                    target_lang=self.target_lang,
                    method='libretranslate_local',
                    processing_time=processing_time
                )
            else:
                raise RuntimeError(f"LibreTranslate –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ LibreTranslate: {e}")
    
    def start_docker_libretranslate(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç LibreTranslate –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        if 'docker' not in self.available_methods:
            return False
        
        try:
            print("üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º LibreTranslate –≤ Docker...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            check_cmd = ['docker', 'ps', '--filter', 'name=libretranslate-offline', '--format', '{{.Names}}']
            result = subprocess.run(check_cmd, capture_output=True, text=True, timeout=10)
            
            if 'libretranslate-offline' in result.stdout:
                print("‚úÖ LibreTranslate –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            docker_cmd = [
                'docker', 'run', '-d',
                '--name', 'libretranslate-offline',
                '-p', '5000:5000',
                'libretranslate/libretranslate:latest'
            ]
            
            subprocess.run(docker_cmd, check=True, timeout=60)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
            print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
            for i in range(30):  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
                try:
                    response = requests.get("http://localhost:5000/languages", timeout=2)
                    if response.status_code == 200:
                        print("‚úÖ LibreTranslate –∑–∞–ø—É—â–µ–Ω –≤ Docker")
                        self.libretranslate_url = "http://localhost:5000"
                        if 'libretranslate' not in self.available_methods:
                            self.available_methods.append('libretranslate')
                        return True
                except:
                    pass
                time.sleep(1)
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ LibreTranslate")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker: {e}")
            return False
    
    def stop_docker_libretranslate(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä LibreTranslate"""
        try:
            subprocess.run(['docker', 'stop', 'libretranslate-offline'], 
                         capture_output=True, timeout=10)
            subprocess.run(['docker', 'rm', 'libretranslate-offline'], 
                         capture_output=True, timeout=10)
            print("üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            pass
    
    def translate(self, text: str, use_cache: bool = True) -> OfflineTranslationResult:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
            
        Returns:
            OfflineTranslationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        """
        self.stats['total_requests'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"{text}|{self.source_lang}|{self.target_lang}"
        if use_cache and cache_key in self.cache:
            self.stats['cache_hits'] += 1
            cached = self.cache[cache_key]
            return OfflineTranslationResult(
                original=text,
                translated=cached,
                source_lang=self.source_lang,
                target_lang=self.target_lang,
                method='cache',
                processing_time=0.0
            )
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
        method_order = self._get_method_order()
        
        for method in method_order:
            try:
                if method == 'argos':
                    result = self.translate_with_argos(text)
                elif method == 'libretranslate':
                    result = self.translate_with_libretranslate(text)
                elif method == 'docker':
                    if self.start_docker_libretranslate():
                        result = self.translate_with_libretranslate(text)
                        result.method = 'libretranslate_docker'
                        self.stats['docker_translations'] += 1
                    else:
                        continue
                else:
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                if use_cache:
                    self.cache[cache_key] = result.translated
                    self._save_cache()
                
                print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ {result.method} –∑–∞ {result.processing_time:.2f}—Å")
                return result
                
            except Exception as e:
                error_msg = f"{method}: {str(e)}"
                print(f"‚ùå {error_msg}")
                self.stats['errors'].append(error_msg)
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        raise RuntimeError("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    def _get_method_order(self) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤"""
        if self.prefer_method == 'auto':
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫: Argos ‚Üí LibreTranslate ‚Üí Docker
            order = ['argos', 'libretranslate', 'docker']
        elif self.prefer_method in self.available_methods:
            # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–≤—ã–º
            order = [self.prefer_method] + [m for m in self.available_methods if m != self.prefer_method]
        else:
            order = self.available_methods
        
        return [m for m in order if m in self.available_methods]
    
    def translate_batch(self, texts: List[str], show_progress: bool = True) -> List[OfflineTranslationResult]:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤"""
        results = []
        total = len(texts)
        
        for i, text in enumerate(texts):
            if show_progress and i % 5 == 0:
                progress = (i / total) * 100
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total} ({progress:.1f}%)")
            
            try:
                result = self.translate(text)
                results.append(result)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{text}': {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                results.append(OfflineTranslationResult(
                    original=text,
                    translated=text,
                    source_lang=self.source_lang,
                    target_lang=self.target_lang,
                    method='error'
                ))
        
        if show_progress:
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total}/{total} (100.0%)")
        
        return results
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            'total_requests': self.stats['total_requests'],
            'cache_hits': self.stats['cache_hits'],
            'cache_hit_rate': (self.stats['cache_hits'] / max(1, self.stats['total_requests'])) * 100,
            'cache_size': len(self.cache),
            'methods_used': {
                'argos': self.stats['argos_translations'],
                'libretranslate': self.stats['libretranslate_translations'], 
                'docker': self.stats['docker_translations']
            },
            'available_methods': self.available_methods,
            'errors_count': len(self.stats['errors']),
            'errors': self.stats['errors'][-3:] if self.stats['errors'] else []
        }
    
    def get_supported_languages(self) -> Dict[str, Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏"""
        return self.LANGUAGE_CODES
    
    def install_language_package(self, source_lang: str, target_lang: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç –¥–ª—è Argos"""
        if not ARGOS_AVAILABLE:
            print("‚ùå Argos Translate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        try:
            source_code = self.LANGUAGE_CODES[source_lang]['code']
            target_code = self.LANGUAGE_CODES[target_lang]['code']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
            argostranslate.package.update_package_index()
            available_packages = argostranslate.package.get_available_packages()
            
            # –ò—â–µ–º –ø–∞–∫–µ—Ç
            for package in available_packages:
                if (package.from_code == source_code and 
                    package.to_code == target_code):
                    print(f"üì¶ –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç {source_lang}‚Üí{target_lang}...")
                    argostranslate.package.install_from_path(package.download())
                    print("‚úÖ –ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
            
            print(f"‚ùå –ü–∞–∫–µ—Ç {source_lang}‚Üí{target_lang} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            return False
    
    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(self, 'prefer_method') and self.prefer_method == 'docker':
            self.stop_docker_libretranslate()


def install_offline_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥–∞"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥–∞:")
    print()
    
    requirements = [
        {
            'name': 'Argos Translate (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø)',
            'command': 'pip install argostranslate',
            'description': '–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥, –ø—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
        },
        {
            'name': 'LibreTranslate —Å–µ—Ä–≤–µ—Ä',
            'command': 'pip install libretranslate',
            'description': '–õ–æ–∫–∞–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä'
        },
        {
            'name': 'Docker (–¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)',
            'command': 'docker pull libretranslate/libretranslate:latest',
            'description': '–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'
        }
    ]
    
    for req in requirements:
        print(f"\nüîß {req['name']}")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {req['command']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {req['description']}")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print(f"   ‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ argostranslate")
    print(f"   ‚Ä¢ Docker - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞")
    print(f"   ‚Ä¢ LibreTranslate —Å–µ—Ä–≤–µ—Ä - –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫")
    
    parser.add_argument('--source', '-s', default='russian',
                       choices=list(OfflineTranslator.LANGUAGE_CODES.keys()),
                       help='–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫')
    
    parser.add_argument('--target', '-t', default='english',
                       choices=list(OfflineTranslator.LANGUAGE_CODES.keys()),
                       help='–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫')
    
    parser.add_argument('--text', 
                       help='–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
    
    parser.add_argument('--file',
                       help='–§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
    
    parser.add_argument('--method', choices=['auto', 'argos', 'libretranslate', 'docker'],
                       default='auto', help='–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥')
    
    parser.add_argument('--install-deps', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
    
    parser.add_argument('--install-package', nargs=2, metavar=('SOURCE', 'TARGET'),
                       help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç –¥–ª—è Argos')
    
    parser.add_argument('--list-languages', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏')
    
    parser.add_argument('--start-docker', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å LibreTranslate –≤ Docker')
    
    args = parser.parse_args()
    
    if args.install_deps:
        install_offline_requirements()
        return
    
    if args.list_languages:
        print("üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:")
        for key, value in OfflineTranslator.LANGUAGE_CODES.items():
            print(f"  {key}: {value['name']} ({value['code']})")
        return
    
    if args.install_package:
        translator = OfflineTranslator('russian', 'english')  # –í—Ä–µ–º–µ–Ω–Ω—ã–π
        success = translator.install_language_package(args.install_package[0], args.install_package[1])
        return
    
    if args.start_docker:
        translator = OfflineTranslator('russian', 'english', prefer_method='docker')
        if translator.start_docker_libretranslate():
            print("‚úÖ LibreTranslate –∑–∞–ø—É—â–µ–Ω –≤ Docker –Ω–∞ http://localhost:5000")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ Ctrl+C
            def signal_handler(sig, frame):
                print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
                translator.stop_docker_libretranslate()
                sys.exit(0)
            
            signal.signal(signal.SIGINT, signal_handler)
            
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            while True:
                time.sleep(1)
        return
    
    if not args.text and not args.file:
        parser.print_help()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
        translator = OfflineTranslator(
            source_lang=args.source,
            target_lang=args.target,
            prefer_method=args.method
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if args.file:
            with open(args.file, 'r', encoding='utf-8') as f:
                text = f.read().strip()
        else:
            text = args.text
        
        print(f"üåê –û—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥: {args.source} ‚Üí {args.target}")
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        print("-" * 50)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º
        result = translator.translate(text)
        
        print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result.translated}")
        print(f"üîß –ú–µ—Ç–æ–¥: {result.method}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.processing_time:.2f}—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = translator.get_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"  –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: {stats['cache_hits']} ({stats['cache_hit_rate']:.1f}%)")
        print(f"  –ú–µ—Ç–æ–¥—ã: {stats['methods_used']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("  python3 offline_translator.py --install-deps")
        print("  python3 offline_translator.py --start-docker")


if __name__ == "__main__":
    main()
