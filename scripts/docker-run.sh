#!/bin/bash
# üê≥ TranslateCore Docker Runner
# –£–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TranslateCore –≤ Docker

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –õ–æ–≥–æ—Ç–∏–ø
echo -e "${GREEN}üåç TranslateCore Docker Runner${NC}"
echo "=================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./docker-run.sh [–ö–û–ú–ê–ù–î–ê] [–û–ü–¶–ò–ò]"
    echo ""
    echo "–ö–û–ú–ê–ù–î–´:"
    echo "  build         - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
    echo "  run          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  translate    - –í—ã–ø–æ–ª–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥"
    echo "  setup        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    echo "  demo         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ –æ—Ñ—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≤–æ–¥–∞"
    echo "  shell        - –ó–∞–ø—É—Å—Ç–∏—Ç—å bash –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    echo "  clean        - –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã"
    echo "  logs         - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  stop         - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo ""
    echo "–ü–†–ò–ú–ï–†–´:"
    echo "  ./docker-run.sh build"
    echo "  ./docker-run.sh translate \"–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\""
    echo "  ./docker-run.sh run"
    echo "  ./docker-run.sh setup"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏
build_image() {
    echo -e "${YELLOW}üì¶ Building TranslateCore Docker image...${NC}"
    docker build -t translatecore:latest .
    echo -e "${GREEN}‚úÖ Build completed successfully!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
run_interactive() {
    echo -e "${YELLOW}üöÄ Starting TranslateCore container...${NC}"
    docker run -it --rm \
        --name translatecore_session \
        -v "$(pwd)/data:/app/data" \
        -v "$(pwd)/cache:/app/cache" \
        -v "$(pwd)/logs:/app/logs" \
        --env-file .env 2>/dev/null || true \
        translatecore:latest
}

# –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
quick_translate() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Error: Please provide text to translate${NC}"
        echo "Usage: ./docker-run.sh translate \"Your text here\""
        exit 1
    fi
    
    echo -e "${YELLOW}üîÑ Translating: $1${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ test –æ–±—Ä–∞–∑–∞
    if docker images | grep -q "translatecore:test"; then
        echo -e "${YELLOW}üì¶ Using test image (fast)...${NC}"
        docker run --rm \
            -v "$(pwd)/data:/app/data" \
            -v "$(pwd)/cache:/app/cache" \
            --env-file .env 2>/dev/null || true \
            translatecore:test \
            "translatecore '$1' ${@:2}"
    else
        echo -e "${YELLOW}üì¶ Auto-downloading language packages if needed...${NC}"
        docker run --rm \
            -v "$(pwd)/data:/app/data" \
            -v "$(pwd)/cache:/app/cache" \
            --env-file .env 2>/dev/null || true \
            translatecore:latest \
            "python3 translate-cli.py '$1'"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞
install_language_package() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo -e "${RED}‚ùå Error: Please provide source and target language codes${NC}"
        echo "Usage: ./docker-run.sh install-package en ru"
        exit 1
    fi
    
    echo -e "${YELLOW}üì¶ Installing language package: $1 ‚Üí $2${NC}"
    docker run --rm \
        -v "$(pwd)/data:/app/data" \
        -v "$(pwd)/cache:/app/cache" \
        translatecore:latest \
        "python3 /app/auto_download_packages.py $1 $2"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
run_setup() {
    echo -e "${YELLOW}‚öôÔ∏è Starting TranslateCore setup wizard...${NC}"
    docker run -it --rm \
        --name translatecore_setup \
        -v "$(pwd)/data:/app/data" \
        -v "$(pwd)/cache:/app/cache" \
        --env-file .env 2>/dev/null || true \
        translatecore:latest \
        "python3 translate-cli.py --setup"
}

# –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ
run_demo() {
    echo -e "${YELLOW}üß™ Starting offline translation demo...${NC}"
    docker run -it --rm \
        --name translatecore_demo \
        -v "$(pwd)/data:/app/data" \
        -v "$(pwd)/cache:/app/cache" \
        translatecore:latest \
        "python3 demo_offline_only.py"
}

# –§—É–Ω–∫—Ü–∏—è shell
run_shell() {
    echo -e "${YELLOW}üêö Opening shell in TranslateCore container...${NC}"
    docker run -it --rm \
        --name translatecore_shell \
        -v "$(pwd)/data:/app/data" \
        -v "$(pwd)/cache:/app/cache" \
        -v "$(pwd)/logs:/app/logs" \
        --env-file .env 2>/dev/null || true \
        translatecore:latest \
        "/bin/bash"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
clean_docker() {
    echo -e "${YELLOW}üßπ Cleaning Docker resources...${NC}"
    docker stop translatecore_session translatecore_setup translatecore_demo translatecore_shell 2>/dev/null || true
    docker system prune -f
    echo -e "${GREEN}‚úÖ Cleanup completed!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
show_logs() {
    if docker ps -q -f name=translatecore_session > /dev/null; then
        docker logs -f translatecore_session
    else
        echo -e "${RED}‚ùå No running TranslateCore container found${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
stop_container() {
    echo -e "${YELLOW}üõë Stopping TranslateCore containers...${NC}"
    docker stop translatecore_session translatecore_setup translatecore_demo translatecore_shell 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Containers stopped${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker.${NC}"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
mkdir -p data cache logs

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-help}" in
    "build")
        build_image
        ;;
    "run")
        run_interactive
        ;;
    "translate")
        quick_translate "$2"
        ;;
    "setup")
        run_setup
        ;;
    "demo")
        run_demo
        ;;
    "shell")
        run_shell
        ;;
    "clean")
        clean_docker
        ;;
    "logs")
        show_logs
        ;;
    "stop")
        stop_container
        ;;
    "help"|*)
        show_help
        ;;
esac
